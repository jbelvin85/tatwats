version: '3.8'

services:
  db:
    image: postgres:13
    restart: always
    environment:
      POSTGRES_USER: ${PGUSER:-podtracker_user}
      POSTGRES_PASSWORD: ${PGPASSWORD:-changeme}
      POSTGRES_DB: ${PGDATABASE:-podtracker_db}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

  # New service for the test database
  test_db:
    image: postgres:13
    restart: "no" # We want to control its lifecycle manually for tests
    environment:
      POSTGRES_USER: ${PGTEST_USER:-test_user}
      POSTGRES_PASSWORD: ${PGTEST_PASSWORD:-test_password}
      POSTGRES_DB: ${PGTEST_DATABASE:-test_db}
    ports:
      - "5433:5432" # Map to a different host port
    volumes:
      - test_db_data:/var/lib/postgresql/data

  backend:
    build: ./webapp/server
    ports:
      - "3001:3001"
    env_file:
      - ./.env
    environment:
      PGHOST: db # Default to development db
      PGPORT: 5432
      # Add test specific environment variables that can override defaults
      PGTEST_HOST: test_db # Connect to the 'test_db' service within the Docker network
      PGTEST_PORT: 5432 # Internal Docker port
    depends_on:
      - db
      - test_db # Backend now depends on both dbs, but will connect based on env vars
    restart: always

  frontend:
    build: ./webapp/client
    ports:
      - "3000:80" # Map host port 3000 to container port 80 (Nginx default)
    depends_on:
      - backend # Frontend depends on backend API
    restart: always

volumes:
  db_data:
  # New volume for the test database
  test_db_data:
